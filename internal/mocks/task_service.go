// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/personal/task-management/internal/usecase (interfaces: TaskService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/personal/task-management/internal/delivery/rest/dtos"
	task "github.com/personal/task-management/internal/domain/task"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskService) CreateTask(arg0 context.Context, arg1 dtos.CreateTaskInput) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServiceMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskService)(nil).CreateTask), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockTaskService) DeleteTask(arg0 context.Context, arg1 dtos.DeleteTaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskServiceMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskService)(nil).DeleteTask), arg0, arg1)
}

// GetEmployeeTasks mocks base method.
func (m *MockTaskService) GetEmployeeTasks(arg0 context.Context, arg1 dtos.GetEmployeeTasksInput) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeTasks", arg0, arg1)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeTasks indicates an expected call of GetEmployeeTasks.
func (mr *MockTaskServiceMockRecorder) GetEmployeeTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeTasks", reflect.TypeOf((*MockTaskService)(nil).GetEmployeeTasks), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockTaskService) GetTask(arg0 context.Context, arg1 dtos.GetTaskInput) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskServiceMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskService)(nil).GetTask), arg0, arg1)
}

// GetTaskSummaryByEmployee mocks base method.
func (m *MockTaskService) GetTaskSummaryByEmployee(arg0 context.Context, arg1 dtos.GetTaskSummaryByEmployeeInput) ([]dtos.EmployeeTaskSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskSummaryByEmployee", arg0, arg1)
	ret0, _ := ret[0].([]dtos.EmployeeTaskSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskSummaryByEmployee indicates an expected call of GetTaskSummaryByEmployee.
func (mr *MockTaskServiceMockRecorder) GetTaskSummaryByEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskSummaryByEmployee", reflect.TypeOf((*MockTaskService)(nil).GetTaskSummaryByEmployee), arg0, arg1)
}

// GetTasksWithFilter mocks base method.
func (m *MockTaskService) GetTasksWithFilter(arg0 context.Context, arg1 dtos.GetTasksWithFilterInput) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksWithFilter indicates an expected call of GetTasksWithFilter.
func (mr *MockTaskServiceMockRecorder) GetTasksWithFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksWithFilter", reflect.TypeOf((*MockTaskService)(nil).GetTasksWithFilter), arg0, arg1)
}

// UpdateTaskStatus mocks base method.
func (m *MockTaskService) UpdateTaskStatus(arg0 context.Context, arg1 dtos.UpdateTaskStatusInput) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", arg0, arg1)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockTaskServiceMockRecorder) UpdateTaskStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockTaskService)(nil).UpdateTaskStatus), arg0, arg1)
}
