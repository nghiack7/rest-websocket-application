// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/personal/task-management/config"
	"github.com/personal/task-management/internal/delivery/rest/handler"
	"github.com/personal/task-management/internal/delivery/rest/middleware"
	"github.com/personal/task-management/internal/delivery/websocket"
	"github.com/personal/task-management/internal/repositories/postgres"
	"github.com/personal/task-management/internal/server"
	"github.com/personal/task-management/internal/usecase"
	"github.com/personal/task-management/pkg/app"
	"github.com/personal/task-management/pkg/db"
	"github.com/personal/task-management/pkg/server/http-server"
	"github.com/personal/task-management/pkg/utils/hasher"
	"github.com/personal/task-management/pkg/utils/jwt"
	"github.com/spf13/viper"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func NewWire() (*app.App, func(), error) {
	viper, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	postgresDB := db.ConnectDB(viper)
	gormDB := loadGormDB(postgresDB)
	userRepository := postgres.NewPostgresUserRepository(gormDB)
	hasher := loadHasher(viper)
	jwtTokenServicer := jwt.NewJWTTokenService(viper)
	userService := usecase.NewUserService(userRepository, hasher, jwtTokenServicer)
	userHandler := handler.NewUserHandler(userService)
	taskRepository := postgres.NewPostgresTaskRepository(gormDB)
	chatRepository := postgres.NewChatRepository(gormDB)
	webSocketService := usecase.NewWebSocketService(chatRepository)
	taskService := usecase.NewTaskService(taskRepository, userRepository, webSocketService)
	taskHandler := handler.NewTaskHandler(taskService)
	authHandler := handler.NewAuthHandler(userService)
	casbinRBACService, err := middleware.NewCasbinRBACService(viper, gormDB)
	if err != nil {
		return nil, nil, err
	}
	websocketHandler := websocket.NewHandler(webSocketService, jwtTokenServicer)
	chatHandler := handler.NewChatHandler(webSocketService, jwtTokenServicer)
	httpServer := server.NewHTTPServer(viper, userHandler, taskHandler, authHandler, casbinRBACService, websocketHandler, chatHandler)
	appApp, cleanup, err := newApp(httpServer)
	if err != nil {
		return nil, nil, err
	}
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

func newApp(httpServer *http.Server) (*app.App, func(), error) {
	app2 := app.NewApp(app.WithServer(httpServer), app.WithName("task-management"))
	return app2, func() {
		app2.
			Stop()
	}, nil
}

func loadGormDB(instance *db.PostgresDB) *gorm.DB {
	instance.MigrateDB()
	return instance.GetDB()
}

func loadHasher(cfg *viper.Viper) usecase.Hasher {
	return hasher.NewBcryptHasher(cfg)
}
